import java.text.SimpleDateFormat

buildscript {
	ext {
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
        jcenter()
        maven { url 'https://jitpack.io' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')

	}
}

plugins {
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.palantir.docker'

bootJar {
    baseName = 'duff-challenge'
    version =  '0.1.0'
}

group = 'ciclic'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}


dependencies {
	implementation('org.springframework.boot:spring-boot-starter-data-rest')
	implementation('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('mysql:mysql-connector-java')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    compileOnly('org.projectlombok:lombok')
    compile 'se.michaelthelin.spotify:spotify-web-api-java:2.0.5'
}

asciidoctor {
	attributes "snippets": snippetsDir,
			"version": version,
			"date": new SimpleDateFormat("yyyy-MM-dd").format(new Date()),
			"stylesheet": "themes/riak.css"
	inputs.dir snippetsDir
	dependsOn test
	sourceDir "src/main/asciidoc"
	outputDir "build/docs"
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree("build/libs/${bootJar.archiveName}"))
    into("build/dependency")
}

docker {
    name "${project.group}-${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}
